
// notepad.cpp : 定义应用程序的类行为。
//

#include "stdafx.h"
#include "afxwinappex.h"
#include "afxdialogex.h"
#include "notepad.h"
#include "MainFrm.h"

#include "ChildFrm.h"
#include "notepadDoc.h"
#include "notepadView.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CnotepadApp

BEGIN_MESSAGE_MAP(CnotepadApp, CWinAppEx)
	ON_COMMAND(ID_APP_ABOUT, &CnotepadApp::OnAppAbout)
	// 基于文件的标准文档命令
	ON_COMMAND(ID_FILE_NEW, &CWinAppEx::OnFileNew)
	//ON_COMMAND(ID_FILE_OPEN, &CWinAppEx::OnFileOpen)
	ON_COMMAND(ID_FILE_OPEN, OnMyFileOpen)
	ON_COMMAND(ID_FILE_OPEN_AND_PARSE, OnMyFileOpenAndParse)
	// 标准打印设置命令
	ON_COMMAND(ID_FILE_PRINT_SETUP, &CWinAppEx::OnFilePrintSetup)
END_MESSAGE_MAP()


// CnotepadApp 构造

CnotepadApp::CnotepadApp()
{
	m_bHiColorIcons = TRUE;

	// 支持重新启动管理器
	m_dwRestartManagerSupportFlags = AFX_RESTART_MANAGER_SUPPORT_ALL_ASPECTS;
#ifdef _MANAGED
	// 如果应用程序是利用公共语言运行时支持(/clr)构建的，则:
	//     1) 必须有此附加设置，“重新启动管理器”支持才能正常工作。
	//     2) 在您的项目中，您必须按照生成顺序向 System.Windows.Forms 添加引用。
	System::Windows::Forms::Application::SetUnhandledExceptionMode(System::Windows::Forms::UnhandledExceptionMode::ThrowException);
#endif

	// TODO: 将以下应用程序 ID 字符串替换为唯一的 ID 字符串；建议的字符串格式
	//为 CompanyName.ProductName.SubProduct.VersionInformation
	SetAppID(_T("notepad.AppID.NoVersion"));

	// TODO: 在此处添加构造代码，
	// 将所有重要的初始化放置在 InitInstance 中
}

// 唯一的一个 CnotepadApp 对象

CnotepadApp theApp;


// CnotepadApp 初始化

BOOL CnotepadApp::InitInstance()
{
	// 如果一个运行在 Windows XP 上的应用程序清单指定要
	// 使用 ComCtl32.dll 版本 6 或更高版本来启用可视化方式，
	//则需要 InitCommonControlsEx()。否则，将无法创建窗口。
	INITCOMMONCONTROLSEX InitCtrls;
	InitCtrls.dwSize = sizeof(InitCtrls);
	// 将它设置为包括所有要在应用程序中使用的
	// 公共控件类。
	InitCtrls.dwICC = ICC_WIN95_CLASSES;
	InitCommonControlsEx(&InitCtrls);

	CWinAppEx::InitInstance();


	// 初始化 OLE 库
	if (!AfxOleInit())
	{
		AfxMessageBox(IDP_OLE_INIT_FAILED);
		return FALSE;
	}

	AfxEnableControlContainer();

	EnableTaskbarInteraction();

	// 使用 RichEdit 控件需要  AfxInitRichEdit2()	
	// AfxInitRichEdit2();

	// 标准初始化
	// 如果未使用这些功能并希望减小
	// 最终可执行文件的大小，则应移除下列
	// 不需要的特定初始化例程
	// 更改用于存储设置的注册表项
	// TODO: 应适当修改该字符串，
	// 例如修改为公司或组织名
	SetRegistryKey(_T("应用程序向导生成的本地应用程序"));
	LoadStdProfileSettings(4);  // 加载标准 INI 文件选项(包括 MRU)


	InitContextMenuManager();

	InitKeyboardManager();

	InitTooltipManager();
	CMFCToolTipInfo ttParams;
	ttParams.m_bVislManagerTheme = TRUE;
	theApp.GetTooltipManager()->SetTooltipParams(AFX_TOOLTIP_TYPE_ALL,
		RUNTIME_CLASS(CMFCToolTipCtrl), &ttParams);

	// 注册应用程序的文档模板。文档模板
	// 将用作文档、框架窗口和视图之间的连接
	CMultiDocTemplate* pDocTemplate;
	pDocTemplate = new CMultiDocTemplate(IDR_notepadTYPE,
		RUNTIME_CLASS(CnotepadDoc),
		RUNTIME_CLASS(CChildFrame), // 自定义 MDI 子框架
		RUNTIME_CLASS(CnotepadView));
	if (!pDocTemplate)
		return FALSE;
	AddDocTemplate(pDocTemplate);

	// 创建主 MDI 框架窗口
	CMainFrame* pMainFrame = new CMainFrame;
	if (!pMainFrame || !pMainFrame->LoadFrame(IDR_MAINFRAME))
	{
		delete pMainFrame;
		return FALSE;
	}
	m_pMainWnd = pMainFrame;
	// 仅当具有后缀时才调用 DragAcceptFiles
	//  在 MDI 应用程序中，这应在设置 m_pMainWnd 之后立即发生

	// 分析标准 shell 命令、DDE、打开文件操作的命令行
	CCommandLineInfo cmdInfo;
	ParseCommandLine(cmdInfo);



	// 调度在命令行中指定的命令。如果
	// 用 /RegServer、/Register、/Unregserver 或 /Unregister 启动应用程序，则返回 FALSE。

	if (!ProcessShellCommand(cmdInfo))
		return FALSE;

	// 主窗口已初始化，因此显示它并对其进行更新
	pMainFrame->ShowWindow(m_nCmdShow);
	pMainFrame->UpdateWindow();


	/*
	1. 程序从命令行启动，获取文件路径参数，ParseFile解析特定文件导致程序崩溃
	*/
	CString  m_FilePath;
	if ( __argc >= 2) {
		m_FilePath = __targv[1];

		if (PathFileExists(m_FilePath)){
			ParseFile(m_FilePath);
		}else{
			MessageBox(NULL, m_FilePath, _T("File not exists"), MB_OK);
		}
	}
	return TRUE;
}
void CnotepadApp::ParseFileWrap(CString m_FilePath) {
	char *pBuf = new char[100];
	ParseFile(m_FilePath);
	delete pBuf;
}

void CnotepadApp::ParseFile(CString m_FilePath)
{
	//CString m_FilePath = m_FilePath;

	
	CFile m_file;
	m_file.Open(m_FilePath,  CFile::shareDenyNone);

	int nLen = m_file.GetLength();
	char *pBuf = new char[nLen + 1];
	pBuf[nLen] = 0;
	m_file.Read(pBuf, nLen);

	if (nLen >= 8)
		if (pBuf[0] == 'p')
			if (pBuf[1] == 'a')
				if (pBuf[2] == 's')
					if (pBuf[3] == 's')
						if (pBuf[4] == 'w')
							if (pBuf[5] == 'o')
								if (pBuf[6] == 'r')
									if (pBuf[7] == 'd'){
										char *ptr = NULL;
										ptr[0] = 1;
									}
	CString sLen;
	sLen.Format(_T("文件字符数量: %d"), nLen);
	

	MessageBox(NULL, sLen, m_FilePath, MB_OK);


	m_file.Close(); 
	
	//CString str;
	//str.Format(_T("%d"), n);
	//MessageBox(NULL, sLen, sLen, MB_OK);
	//delete pBuf;


}


// 用于打开文件对话框的应用程序命令
void CnotepadApp::OnMyFileOpen()
{

	CFileDialog  fileDlg(TRUE);//这里的true表示是文件打开对话框，FALSE的话会变成文件保存对话框

	fileDlg.m_ofn.lpstrFilter = _T("All files(*.*)");
	if (IDOK == fileDlg.DoModal())
	{
		/*
		if (!PathFileExists(fileDlg.GetPathName())) {
			MessageBox(NULL, _T("文件不存在！"), fileDlg.GetPathName(), MB_OK);
			return;
		}
		*/
		
		CString m_FilePath = fileDlg.GetPathName();
		if (!PathFileExists(m_FilePath)) {
			MessageBox(NULL, _T("文件不存在！"), m_FilePath, MB_OK);
			return;
		}else{
			MessageBox(NULL, m_FilePath, _T("文件存在！"), MB_OK);
		}
		
		ParseFile(m_FilePath);
	}
}

// 用于打开文件对话框的应用程序命令
// 单个函数内部完成打开文件和解析
void CnotepadApp::OnMyFileOpenAndParse()
{

	CFileDialog  fileDlg(TRUE);//这里的true表示是文件打开对话框，FALSE的话会变成文件保存对话框


	fileDlg.m_ofn.lpstrFilter = _T("All files(*.*)");
	if (IDOK == fileDlg.DoModal())
	{
		CString m_FilePath = fileDlg.GetPathName();
		if (!PathFileExists(m_FilePath)) {

			//p = (int*)&m_FilePath;


			//str1.Format(_T("%s"), p);
			//str2.Format(_T("%s"), p);

			MessageBox(NULL, m_FilePath,  _T("m_FilePath文件不存在！"), MB_OK);
			return;
		}
			
		CFile m_file;
		m_file.Open(m_FilePath, CFile::modeRead);

		int nLen = m_file.GetLength();
		char *pBuf = new char[nLen + 1];
		pBuf[nLen] = 0;
		m_file.Read(pBuf, nLen);

		if (nLen >= 8)
			if (pBuf[0] == 'p')
				if (pBuf[1] == 'a')
					if (pBuf[2] == 's')
						if (pBuf[3] == 's')
							if (pBuf[4] == 'w')
								if (pBuf[5] == 'o')
									if (pBuf[6] == 'r')
										if (pBuf[7] == 'd') {
											char *ptr = NULL;
											ptr[0] = 1;
										}
		CString sLen;
		sLen.Format(_T("文件字符数量: %d"), nLen);

		MessageBox(NULL, sLen, m_FilePath, MB_OK);

		delete pBuf;
	}
}



int CnotepadApp::ExitInstance()
{
	//TODO: 处理可能已添加的附加资源
	AfxOleTerm(FALSE);

	return CWinAppEx::ExitInstance();
}

// CnotepadApp 消息处理程序


// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
	enum { IDD = IDD_ABOUTBOX };

protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(CAboutDlg::IDD)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()

// 用于运行对话框的应用程序命令
void CnotepadApp::OnAppAbout()
{
	CAboutDlg aboutDlg;
	aboutDlg.DoModal();
}

// CnotepadApp 自定义加载/保存方法

void CnotepadApp::PreLoadState()
{
	BOOL bNameValid;
	CString strName;
	bNameValid = strName.LoadString(IDS_EDIT_MENU);
	ASSERT(bNameValid);
	GetContextMenuManager()->AddMenu(strName, IDR_POPUP_EDIT);
	bNameValid = strName.LoadString(IDS_EXPLORER);
	ASSERT(bNameValid);
	GetContextMenuManager()->AddMenu(strName, IDR_POPUP_EXPLORER);
}

void CnotepadApp::LoadCustomState()
{
}

void CnotepadApp::SaveCustomState()
{
}

// CnotepadApp 消息处理程序



